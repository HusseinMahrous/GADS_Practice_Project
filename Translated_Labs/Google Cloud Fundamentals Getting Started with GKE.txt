# LAB : Google Cloud Fundamentals: Getting Started with GKE 

## Objectives
In this lab, you learn how to perform the following tasks:
- Provision a Kubernetes cluster using Kubernetes Engine.
- Deploy and manage Docker containers using kubectl.

## Steps :
1- Start a Kubernetes Engine cluster :
	- Place the zone that Qwiklabs assigned you to into an environment variable called MY_ZONE :
		export MY_ZONE=us-central1-a
	
	- Start a Kubernetes cluster managed by Kubernetes Engine. Name the cluster webfrontend and configure it to run 2 nodes:
		gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2
	
	It takes several minutes to create a cluster as Kubernetes Engine provisions virtual machines for you.
		
	- After the cluster is created, check your installed version of Kubernetes using the kubectl version command:
		kubectl version
		
2- Run and deploy a container :
	- From your Cloud Shell prompt, launch a single instance of the nginx container. (Nginx is a popular web server.) :
		kubectl create deploy nginx --image=nginx:1.17.10
		
	In Kubernetes, all containers run in pods. This use of the kubectl create command caused Kubernetes to create a deployment consisting of a single pod containing the nginx container. A Kubernetes deployment keeps a given number of pods up and running even in the event of failures among the nodes on which they run. In this command, you launched the default number of pods, which is 1.
	Note: If you see any deprecation warning about future version you can simply ignore it for now and can proceed further.
	
	- View the pod running the nginx container:
		kubectl get pods
		
	- Expose the nginx container to the Internet:
	kubectl expose deployment nginx --port 80 --type LoadBalancer
	
	Kubernetes created a service and an external load balancer with a public IP address attached to it. The IP address remains the same for the life of the service. Any network traffic to that public IP address is routed to pods behind the service: in this case, the nginx pod.


	- View the new service:
		kubectl get services
		
	You can use the displayed external IP address to test and contact the nginx container remotely.
	It may take a few seconds before the External-IP field is populated for your service. This is normal. Just re-run the kubectl get services command every few seconds until the field is populated.
	
	
	- Scale up the number of pods running on your service:
		kubectl scale deployment nginx --replicas 3
		
	Scaling up a deployment is useful when you want to increase available resources for an application that is becoming more popular.
	
	
	- Confirm that Kubernetes has updated the number of pods:
		kubectl get pods
		
		
	- Confirm that your external IP address has not changed:
		kubectl get services

